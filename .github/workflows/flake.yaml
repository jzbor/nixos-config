name: flake

on:
  push:
  pull_request:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Install Nix'
      uses: DeterminateSystems/nix-installer-action@main
    - name: Install statix
      run: nix build nixpkgs#statix --no-link
    - name: 'Run static checks'
      run: nix run nixpkgs#statix -- check

  dead-code-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Install Nix'
      uses: DeterminateSystems/nix-installer-action@main
    - name: Install deadnix
      run: nix build nixpkgs#deadnix --no-link
    - name: 'Run dead code checks'
      run: nix run nixpkgs#deadnix -- -_ -f .

  build-system:
    runs-on: ubuntu-latest
    needs: [static-analysis, dead-code-analysis]
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - system: 'x1-carbon'
            arch: 'x86_64-linux'
          - system: 'desktop-i5'
            arch: 'x86_64-linux'
          - system: 'x250'
            arch: 'x86_64-linux'
          - system: 'e531'
            arch: 'x86_64-linux'
          # - system: 'pinebook-pro'
          #   arch: 'aarch64-linux'
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Install Nix'
      uses: DeterminateSystems/nix-installer-action@main
    - name: 'Install QEMU/binfmt'
      uses: docker/setup-qemu-action@v1
      if: ${{ matrix.arch != 'x86_64-linux' }}
    - name: Setup Attic cache
      uses: ryanccn/attic-action@v0.2.1
      with:
        endpoint: ${{ secrets.ATTIC_ENDPOINT }}
        cache: ${{ secrets.ATTIC_CACHE }}
        token: ${{ secrets.ATTIC_TOKEN }}
    - name: 'Checking binary cache'
      id: check-binary-cache
      run: if curl -f "${{ secrets.ATTIC_ENDPOINT }}/${{ secrets.ATTIC_CACHE }}/$(nix eval --raw ".#nixosConfigurations.${{ matrix.system }}.config.system.build.toplevel" | sed 's/.nix.store.\([a-z0-9]*\).*/\1/').narinfo"; then echo "exists=1" | tee -a $GITHUB_OUTPUT; fi
    - name: 'Build system'
      if: ${{ steps.check-binary-cache.outputs.exists == null }}
      run: nix build ".#nixosConfigurations.${{ matrix.system }}.config.system.build.toplevel"

  build-home:
    runs-on: ubuntu-latest
    needs: [static-analysis, dead-code-analysis]
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - arch: 'x86_64-linux'
          - arch: 'aarch64-linux'
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Install Nix'
      uses: DeterminateSystems/nix-installer-action@main
    - name: 'Install QEMU/binfmt'
      uses: docker/setup-qemu-action@v1
      if: ${{ matrix.arch != 'x86_64-linux' }}
    - name: Setup Attic cache
      uses: ryanccn/attic-action@v0.2.1
      with:
        endpoint: ${{ secrets.ATTIC_ENDPOINT }}
        cache: ${{ secrets.ATTIC_CACHE }}
        token: ${{ secrets.ATTIC_TOKEN }}
    - name: 'Checking binary cache'
      id: check-binary-cache
      run: if curl -f "${{ secrets.ATTIC_ENDPOINT }}/${{ secrets.ATTIC_CACHE }}/$(nix eval --raw ".#homeConfigurations.jzbor.config.home-files" | sed 's/.nix.store.\([a-z0-9]*\).*/\1/').narinfo"; then echo "exists=1" | tee -a $GITHUB_OUTPUT; fi
    - name: 'Build home'
      # This probably builds x86_64 either way, no clue why
      run: nix build ".#homeConfigurations.jzbor.config.home-files"

